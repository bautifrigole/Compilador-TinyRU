package compiler.lexical_analyzer;

/**
 * Enum con todos los posibles valores del ID de un token.
 * @author Bautista Frigol√© y Francisco Devaux
 */
public enum TokenID {
    NONE,
    // Keywords
    TOKEN_KW_STRUCT,
    TOKEN_KW_IMPL,
    TOKEN_KW_ELSE,
    TOKEN_KW_FALSE,
    TOKEN_KW_IF,
    TOKEN_KW_RET,
    TOKEN_KW_WHILE,
    TOKEN_KW_TRUE,
    TOKEN_KW_NIL,
    TOKEN_KW_NEW,
    TOKEN_KW_FN,
    TOKEN_KW_ST,
    TOKEN_KW_PRI,
    TOKEN_KW_SELF,

    // Identifiers
    TOKEN_ID_OBJ,
    TOKEN_ID_CLASS,

    // Literal
    TOKEN_LITERAL_INT,
    TOKEN_LITERAL_STR,
    TOKEN_LITERAL_CHAR,

    // Operators
    TOKEN_OP_PLUS,
    TOKEN_OP_MINUS,
    TOKEN_OP_MULT,
    TOKEN_OP_DIV,
    TOKEN_OP_MOD,
    TOKEN_OP_AND,
    TOKEN_OP_OR,
    TOKEN_OP_NOT,
    TOKEN_OP_EQ,
    TOKEN_OP_NEQ,
    TOKEN_OP_LARGER,
    TOKEN_OP_SMALLER,
    TOKEN_OP_LARGEREQ,
    TOKEN_OP_SMALLEREQ,
    TOKEN_OP_ASSIGN,
    TOKEN_OP_DOUBLEPLUS,
    TOKEN_OP_DOUBLEMINUS,
    TOKEN_OP_ARROW,


    // Types
    TOKEN_TYPE_INT,
    TOKEN_TYPE_BOOL,
    TOKEN_TYPE_CHAR,
    TOKEN_TYPE_STR,
    TOKEN_TYPE_VOID,


    // Characters

    TOKEN_TAB,
    TOKEN_VERTICALTAB,
    TOKEN_CARRIAGERETURN,
    TOKEN_OPEN_PAREN,
    TOKEN_CLOSE_PAREN,
    TOKEN_OPEN_BRACE,
    TOKEN_CLOSE_BRACE,
    TOKEN_OPEN_BRACKET,
    TOKEN_CLOSE_BRACKET,
    TOKEN_COMMA,
    TOKEN_DOT,
    TOKEN_COLON,
    TOKEN_SEMICOLON,
    TOKEN_EOF,
    TOKEN_STRUCT_OBJECT,
    TOKEN_STRUCT_ARRAY,
    TOKEN_STRUCT_IO,
}
